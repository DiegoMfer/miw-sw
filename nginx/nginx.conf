# Nginx reverse proxy configuration for HTTPS
server {
    listen 443 ssl;
    server_name _;

    ssl_certificate     /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    # Serve static index.html for root
    location = /index.html {
        root /usr/share/nginx/html;
    }
    location = / {
        root /usr/share/nginx/html;
        try_files /index.html @gateway;
    }

    # Proxy /data-panel to data-panel-client (SPA support)
    location /data-panel/ {
        proxy_pass http://data-panel-client:80/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        # Only try to serve static files, do not rewrite to /data-panel/index.html
        try_files $uri $uri/ =404;
    }

    # Proxy /search to search-miw-client (SPA support)
    location /search/ {
        proxy_pass http://search-miw-client:80/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        # Only try to serve static files, do not rewrite to /search/index.html
        try_files $uri $uri/ =404;
    }

    # Proxy /api and all other requests to gateway
    location /api/ {
        proxy_pass http://gateway:8080/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location @gateway {
        proxy_pass http://gateway:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Optionally redirect HTTP to HTTPS
server {
    listen 80;
    server_name _;
    return 301 https://$host$request_uri;
}
